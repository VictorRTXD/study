Te damos la bienvenida al Curso de NPM: Gestión de Paquetes y Dependencias en JavaScript.

En este curso aprenderás a: * Qué es NPM, dependencias y paquetes * Cómo instalar dependencias a un proyecto * Cómo compartir y crear paquetes para la comunidad * Cómo funcionan los paquetes públicos y privados en NPM

------------------

1995: nace JS inicia travesia de JS, ahora es lo mas popular con miles de apps.

2009: nace Node.js, propuesta de llevar en navegadores y cualquier lugar donde se pueda correr, y tabmien nace el gestor de paquetes npm, es la forma en que la comunidad puede crear herramientas y compartirlas.

que son gestores de dependencias? 
organizar, administrar y tener serie de herramientas a lo largo de este recurso para admininistrar  paquetes y recursos que utilizaremos en nuestros proyectos dandonos ventaja en el desarrollo, aprovechando que en vez de nosotros crear nuestras soluciones, utilizar los que ya ha creado la comunidad que ya han sido probados y validados asi siendo mas agilies aprovechando esto en nuestras apps. No debemos de abusar de esta herramienta porque tambien tiene un recurso administrativo y seguimiento puede llegar a tener bugs, hay que tener presente que tendremos paquetes y modulos que searan usados e instalados en proyectos segun el caso, podemos tener paquetes que solo funcionen para node o para toda la arquitectura web, ya viene incluido en node.
vamos a tener un CLI (command line client), nos ayudara a trabajar de la forma correcta con comandos.

-------------------

El archivo package.json estaría estructurado inicialmente por las siguientes propiedades:

"name": Indica el nombre del proyecto.
"version": Indica la versión del proyecto.
"description": Indica una breve descripción del proyecto.
"main": Indica el archivo principal del proyecto.
"scripts": Indica los comandos a ejecutar del proyecto (no te preocupes por el comando test por ahora).
"keywords": Indica las palabras clave del proyecto.
"author": Indica el nombre y dirección de correo electrónico del propietario del proyecto.
"license": Indica la licencia del proyecto.

------------------------------------------
Existen tres tipos de dependencias: locales, desarrollo y globales.

Cómo instalar dependencias locales
Para instalar una dependencia local, utiliza uno de los siguientes comandos, donde es el nombre del paquete.

Qué son las dependencias de desarrollo
Las dependencias de desarrollo son aquellas que no son obligatorias para el proyecto, es decir, sin estas la aplicación servirá. Estas dependencias ofrecen una ayuda para construir código de forma óptima, por ejemplo, formatear el código, agregar estilos, levantar un servidor para observar los cambios.

Qué son las dependencias globales
Las dependencias globales son aquellas que están disponibles para todos los proyectos en tu computador

ejemplo de instalaciones de dependencias:
{npm install moment}: con esto instalamos una dependencia 

{npm install eslint --save-dev || npm install eslint -D}: dependencia que solo va a ser utilizada en el entorno de desarollo y testeo y jamas en produccion

{npm install react --save || npm install react -S}: dependencias que seran llevadas a produccion y hacer correr la aplicacion.

{npm install -g cowsay}: instalar paquetes globales a todo el sistema operativo

{npm list}: nos muestra los paquetes que hemos instalado

{npm list -g}: Ver lista de paquetes globlales 

-----------------------------------------
En ciertas situaciones es necesario isntalar una version especifica de un paquete ya 
sea porque el proyecto no puede actualizarse a versiones recientes o porque el equipo necesita trabajar sobre una misma version.

{npm install eslint -o}: Instalar una dependencia opcional

Cuando estes trabajando con multiples dependencias en un proyecto, pueden tener un conflicto, al tener una dependencia en comun con versiones distintas

{npm install react-dom --dry-run}: sirve para simular una instalacion sin descargar nada

{npm install package-name@0.15.0 || npm install package-name@latest}:  Instalar la versión especifica de un paquete. Si luego se quiere instalar la versión más reciente se usa.

{npm install}: Para instalar las dependencias de produccion y desarrollo de un proyecto clonado

--------------------------------------------
Dentro de npm podremos correr comandos o scripts dentro de package.json en el apartado de scripts, aqui tambien utilizaras para crear comandos que optimicen el desarrollo de tu app.

para correr tus comandos, hay que poner el nombre del comando seguido de la ruta del archivo .js con el codigo a ejecutar

start: {node src/index.js}: como hacer un script en package.json

dosComandos: {node src/index.js && node src/index.js}: los && ejecutan mas comandos en uno, como descargando elemento de una API y luego procesarla

{npm run start}: ejemplo para correr un script creado en la consola

NPX: node package execute: nos permite ejecutar paquetes sin instalarlos. 

{npx create-react-app my-app}: ejemplo de uso de npx

------------------------------------------------
Ahora aprenderemos a acutalizar dependencias.

{npm outdate}: muestra cuales son las dependencias que han tenido actualizaciones o cambios

{npm update}: Para actualizar todas las dependencias utiliza el siguiente comando, Ten en cuenta que actualizar varios paquetes no es recomendable, solamente deberías actualizar un paquete si estás muy seguro de que no afectará al proyecto y que realizaste los cambios pertinentes.
------------------------------------------------
La seguridad de tu proyecto puede ser vulnerada por paquetes desactualizados. Al momento de instalar tus paquetes con el comando npm install muestra una serie de advertencias (NPM WARN) de las dependencias desactualizadas.

{npm audit}:  muestra una descripción de las dependencias instaladas. Si se encuentran vulnerabilidades, se calculará el impacto al proyecto.

{npm audit --json}: muestra una descripción de las dependencias instaladas. Si se encuentran vulnerabilidades, se calculará el impacto al proyecto, pero en forma de json mas detallado.

{npm audit fix}: proporciona una actualización de los paquetes, similar al comando npm update <paquete>

{npm audit fix --force}: proporciona una actualización de los subpaquetes de cada paquete, en todos sus niveles de profundidad.
-----------------------------------------------------

Conocer cómo eliminar dependencias, también es importante para mantener tus proyectos sin paquetes que no aporten la solución a tu problema, que ya no sean actualizados, o que exista una mejor implementación.

{npm uninstall <paquete>}: elimina el paquete.

Tambien se puede eliminar una dependecia eliminandolo desde VSCODE en el archivo package.json, luego es necesario actualizar el directorio de node_modules:

{rm -rf node_modules}: se elimina todos los modulos
{npm install}: regresar todo lo que habiamos eliminado, sin contar las que borramos manualmente en vscode

{npm run build}: se refiere a ejecutar un script de construcción que combina y minifica los archivos del proyecto, convirtiéndolos en una versión lista para producción. Esto puede incluir acciones como la eliminación de comentarios y espacios en blanco, la compresión de imágenes y la transpilación de código moderno a una versión compatible con navegadores antiguos.

{npm run build --dd}: el flag --dd muestra mas info de forma verbose. Tambien muestra los pasos ejecutados por un comando de NPM

{npm ci}: muestra en consola mensajes de librerias deprecadas y puede sincronizar el package con package-lock

Que es package-lock??: contiene info necesaria de dependencias, dependencias de dearrollo y dependencias que estan dentro de otras dependencias, es una forma rapida para identificar los elementos que requiere un proyecto e instalarlos


